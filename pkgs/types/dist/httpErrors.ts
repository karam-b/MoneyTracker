
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify `json-schema/httpErrors.ts`,
 * and run json-schema-to-typescript to regenerate this file.
 */
export interface HttpErrors_FieldsRequired {
  status: 400;
  name: "SomeFieldsRequired";
  message: string;
  details: {
    errors: {
      [k: string]: string;
    };
  };
}


export interface HttpErrors_EmailOrPasswordIncorrect {
  status: 401;
  name: "EmailOrPasswordIncorrect";
  message: string;
  details: null;
}


export interface HttpErrors_BadBasicToken {
  status: 401;
  name: "BadBasicToken";
  message: string;
  details: null;
}


export interface HttpErrors_PasswordIncorrect {
  status: 401;
  name: "PasswordIncorrect";
  message: string;
  details: null;
}


export interface HttpErrors_UserAlreadyExist {
  status?: 409;
  name?: "UserAlreadyExist";
  message?: string;
  details?: {
    errors?: {
      email: string;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}


export interface HttpErrors_EmailIsUsed {
  status: 400;
  name: "EmailIsUsed";
  message: string;
  details: null;
}


export interface HttpErrors_ResourceWasNotFound {
  status: 404;
  name: "ResourceWasNotFound";
  message: string;
  details: null;
}


export interface HttpErrors_UnknownServerError {
  status: 500;
  name: "UnknownServerError";
  message: string;
  details: null;
}


export interface HttpErrors_ValidationError {
  status: 400;
  name: "ValidationError";
  message: string;
  details: {
    errors?: {
      [k: string]: string;
    };
    [k: string]: unknown;
  };
}


export interface HttpErrors_FailedToDelete {
  status: 500;
  name: "FailedToDelete";
  message: string;
  details: null;
}


export interface HttpErrors_UnAuthorized {
  status: 401;
  name: "UnAuthorized";
  message: string;
  details: null;
}


export interface HttpErrors_TokenFailed {
  status: 401;
  name: "TokenFailed";
  message: string;
  details: {
    type: "JsonWebTokenError" | "TokenExpiredError" | "NoTokenWasProvided" | "UnspecifiedError";
    date?: string;
  };
}


export interface HttpErrors_DefaultError {
  status: 500;
  name: "UnspecifiedError";
  message: string;
  details: null;
}

