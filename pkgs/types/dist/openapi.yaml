openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
paths:
  /log/:
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                type: array
                items:
                  $ref: "#/components/schemas/SchemaLog_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: list all logs
      description: list all logs for the current user
      tags:
        - log
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
    post:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaLog_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: create new log
      description: create new log for the current user
      tags:
        - log
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              $ref: "#/components/schemas/SchemaLog_in"
  "/log/{id}/":
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaLog_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: get log
      description: create new log for the current user
      tags:
        - log
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
    put:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaLog_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: update log
      description: update log by id
      tags:
        - log
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              $ref: "#/components/schemas/SchemaLog_in_update"
    delete:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                type: object
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: delete log
      description: delete log by id
      tags:
        - log
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
  /profile/status/:
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      type: string
                      enum:
                        - local
                        - google
        "400":
          description: validation error
          $ref: "#/components/schemas/HttperrorsValidationerror"
      summary: authentication status
      description: when provided with email, this will resolve to all available
        authentication methods for given email
      tags:
        - profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  examples:
                    - k@gmail.com
  /profile/:
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaProfile"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: get profile
      description: retrieve profile info
      tags:
        - profile
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
    put:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaProfile"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: update profile
      description: update profile information
      tags:
        - profile
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              type: object
              properties:
                displayName:
                  type: string
                  examples:
                    - Joe Doe
                picture:
                  type: string
                  examples:
                    - https://example.com/path/to/img
  /profile/password/:
    put:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaProfile"
        "400":
          description: validation error
          $ref: "#/components/schemas/HttperrorsValidationerror"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: (re)set password
      description: update users password
      tags:
        - profile
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              type: object
              required:
                - newPassword
              properties:
                oldPassword:
                  description: may be required if `local` authenticate is provided
                  type: string
                newPassword:
                  type: string
  /category/:
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                type: array
                items:
                  $ref: "#/components/schemas/SchemaCategory_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: list all categories
      description: list all categories for the current user
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
    post:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaCategory_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
      summary: create new category
      description: create new category for the current user
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: " brearer token, obtained from /auth/*"
          required: true
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              $ref: "#/components/schemas/SchemaLog_in"
  "/category/{id}/":
    get:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaCategory_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: get category
      description: get category by id
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
    put:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaCategory_out"
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: update category
      description: update category by id
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              $ref: "#/components/schemas/SchemaCategory_in_update"
    delete:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                type: object
        "401":
          description: unauthorized
          $ref: "#/components/schemas/HttperrorsUnauthorized"
        "404":
          description: resource was not found
          $ref: "#/components/schemas/HttperrorsResourcewasnotfound"
      summary: delete category
      description: delete category by id
      tags:
        - category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: id of the resource
          required: true
          schema:
            type: string
            format: bearer
            example: 63da2a0a643dd3aa49f5c6b1
  /auth/local/login/:
    post:
      responses:
        "200":
          description: 200 ok
          content:
            application/json:
              schema:
                description: return data
                $ref: "#/components/schemas/SchemaProfile"
        "401":
          description: password or email doesn't match
          $ref: "#/components/schemas/HttperrorsPasswordincorrect"
      security:
        - basicAuth: []
      parameters:
        - name: Authorization
          in: header
          description: base64 email and password pair with colon as delimiter
          required: true
          schema:
            type: string
            example: Basic xxxxxxxxx=
            format: password
      summary: login
      description: login using email and password using Basic Token Http Authorization
      tags:
        - local_authorization
  /auth/local/register/:
    post:
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                description: ""
                $ref: "#/components/schemas/SchemaProfile"
        "401":
          description: password or email doesn't match
          $ref: "#/components/schemas/HttperrorsPasswordincorrect"
        "409":
          description: user already exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttperrorsUseralreadyexist"
      security:
        - basicAuth: []
      parameters:
        - name: Authorization
          in: header
          description: base64 email and password pair with colon as delimiter
          required: true
          schema:
            type: string
            example: Basic xxxxxxxxx=
            format: password
      summary: register
      description: make new account using email and password
      tags:
        - local_authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: request body
              type: object
              properties:
                displayName:
                  type: string
                  description: display name
                  examples:
                    - John Doe
components:
  schemas:
    SchemaLog_out:
      allOf:
        - type: object
          properties:
            _id:
              type: string
            __v:
              type: number
          required:
            - _id
            - __v
          additionalProperties: false
        - type: object
          properties:
            createdAt:
              type: string
            updatedAt:
              type: string
          required:
            - createdAt
            - updatedAt
          additionalProperties: false
        - type: object
          properties:
            createdBy:
              type: string
            title:
              type: string
            amount:
              type: number
            category:
              $schema: http://json-schema.org/draft-07/schema#
              allOf:
                - type: object
                  properties:
                    _id:
                      type: string
                    __v:
                      type: number
                  required:
                    - _id
                    - __v
                  additionalProperties: false
                - type: object
                  properties:
                    createdBy:
                      type: string
                    title:
                      type: string
                    color:
                      type: string
                    icon:
                      type: string
                  required:
                    - createdBy
                    - title
                  additionalProperties: false
            note:
              type: string
          required:
            - createdBy
            - title
            - amount
          additionalProperties: false
    HttperrorsUnauthorized:
      type: object
      description: UnAuthorized
      properties:
        status:
          const: 401
        name:
          const: UnAuthorized
        message:
          type: string
        details:
          type: "null"
      required:
        - status
        - name
        - message
        - details
      additionalProperties: false
    SchemaLog_in:
      type: object
      properties:
        title:
          type: string
        amount:
          type: number
        category:
          type: string
        note:
          type: string
      required:
        - title
        - amount
      additionalProperties: false
    HttperrorsResourcewasnotfound:
      type: object
      description: ResourceWasNotFound
      properties:
        status:
          const: 404
        name:
          const: ResourceWasNotFound
        message:
          type: string
        details:
          type: "null"
      required:
        - status
        - name
        - message
        - details
      additionalProperties: false
    SchemaLog_in_update:
      type: object
      properties:
        title:
          type: string
        amount:
          type: number
        category:
          type: string
        note:
          type: string
      additionalProperties: false
    HttperrorsValidationerror:
      type: object
      description: ValidationError
      properties:
        status:
          const: 400
        name:
          const: ValidationError
        message:
          type: string
        details:
          type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: string
      required:
        - status
        - name
        - message
        - details
      additionalProperties: false
    SchemaProfile:
      allOf:
        - type: object
          properties:
            _id:
              type: string
            __v:
              type: number
          required:
            - _id
            - __v
          additionalProperties: false
        - type: object
          properties:
            createdAt:
              type: string
            updatedAt:
              type: string
          required:
            - createdAt
            - updatedAt
          additionalProperties: false
        - type: object
          properties:
            displayName:
              type: string
            email:
              type: string
            providers:
              $id: "#providers"
              type: array
              items:
                type: string
                enum:
                  - local
                  - google
            picture:
              type: string
            token:
              type: string
          required:
            - displayName
            - email
            - providers
            - token
          additionalProperties: false
    SchemaCategory_out:
      allOf:
        - type: object
          properties:
            _id:
              type: string
            __v:
              type: number
          required:
            - _id
            - __v
          additionalProperties: false
        - type: object
          properties:
            createdBy:
              type: string
            title:
              type: string
            color:
              type: string
            icon:
              type: string
          required:
            - createdBy
            - title
          additionalProperties: false
    SchemaCategory_in_update:
      type: object
      properties:
        title:
          type: string
        color:
          type: string
        icon:
          type: string
      additionalProperties: false
    HttperrorsPasswordincorrect:
      type: object
      description: PasswordIncorrect
      properties:
        status:
          const: 401
        name:
          const: PasswordIncorrect
        message:
          type: string
        details:
          type: "null"
      required:
        - status
        - name
        - message
        - details
      additionalProperties: false
    HttperrorsUseralreadyexist:
      type: object
      description: UserAlreadyExist
      properties:
        status:
          const: 409
        name:
          const: UserAlreadyExist
        message:
          type: string
        details:
          type: object
          properties:
            errors:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
              additionalProperties: false
      required:
        - status
        - name
        - message
        - details
      additionalProperties: false
